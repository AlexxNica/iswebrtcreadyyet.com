doctype html
html(lang="en")
  head
    title Is WebRTC ready yet?
    
    meta(charset="utf-8")
    meta(http-equiv="X-UA-Compatible", content="IE=edge")
    meta(name="viewport", content="width=device-width, initial-scale=1")
    meta(name="description", content="WebRTC, Talky, WebAudio, SimpleWebRTC")

    link(rel="stylesheet", type="text/css", href="//cloud.typography.com/7773252/712764/css/fonts.css")
    link(rel='stylesheet', href='css/style.css')

  body
    .content
      section
        h1 Is WebRTC ready yet?
        #support.card
          h2 Browser support scorecard
          table
            tr.browsers
              th 
              th
                img(src="images/canary.png", alt="Chrome Canary", title="Chrome Canary")
              th 
                img(src="images/chrome.png", alt="Chrome", title="Chrome")
              th 
                img(src="images/nightly.png", alt="Firefox Nightly", title="Firefox Nightly")
              th
                img(src="images/firefox.png", alt="Firefox", title="Firefox")
              th
                img(src="images/ie.png", alt="Internet Explorer", title="Internet Explorer")
              th
                img(src="images/safari.png", alt="Safari", title="Safari")
              th
                img(src="images/opera.png", alt="Opera", title="Opera")
            tr.versions
              th
              th Canary
              th Chrome 35
              th Nightly
              th Firefox 29
              th IE
              th Safari
              th Opera 21
            tr 
              th.feature 
                a(href="#peerConn") PeerConnection API
              td.yes
              td.yes
              td.yes
              td.yes
              td.no(title="not under consideration")
              td.no
              td.yes
            tr.about
              th
              td(colspan="7") The basic building block for connecting to peers. Defined by the W3C WebRTC Working Group.
            tr 
              th.feature 
                a(href="#peerConn") ORTC API
              td.no
              td.no
              td.no
              td.no
              td.inc(title="requires the ORTC prototype plugin")
              td.no
              td.no
            tr.about
              th
              td(colspan="7") An alternative to the PeerConnection API defined by the W3C ORTC Community Group. A prototype plugin for Chrome and Internet Explorer is available from <a href="http://msopentech.com/blog/2014/04/25/updated-ortc-api-prototype-released/">MS Open Tech</a>.
            tr
              th
                a(href="#getUserMedia") getUserMedia
              td.yes
              td.yes
              td.yes
              td.yes
              td.inc(title="requires the ORTC prototype plugin")
              td.no
              td.yes
            tr.about
              th
              td(colspan="7") The ability to request access to a user's webcam and microphone.
            tr
              th
                a(href="#mediaConstraints", title="for bandwidth control") mediaConstraints
              td.inc
              td.inc
              td.inc
              td.no
              td.no
              td.no
              td.inc
            tr.about
              th
              td(colspan="7") The ability to specify restricted video sizes. This is important for bandwidth control. There are two aspects to this. The first is being able to specify constraints when first requesting access. The second is allowing you to apply constraints to an existing MediaStream. 
            tr
              th
                a(href="#turn") TURN support
              td.yes
              td.yes
              td.yes
              td.inc(title="bugzilla 1000858 prevents TURN from working on windows")
              td.no
              td.no
              td.yes
            tr.about
              th
              td(colspan="7") TURN servers are necessary for situations where STUN fails to produce two addressable endpoints. Which is a fancy way of saying, "getting around firewalls."
            tr
              th
                a(href="#mediaStream") MediaStream API
              td.yes
              td.yes
              td.inc
              td.inc
              td.no
              td.no
              td.yes
            tr.about
              th
              td(colspan="7") When you request user media or get media from a peer it's held in a MediaStream object. Having the ability to add/remove tracks, mute, and apply constraints makes it possible to do audio processing and control bandwidth consumption.
            tr
              th
                a(href="#webAudio") WebAudio Integration
              td.yes
              td.yes
              td.yes
              td.yes
              td.no
              td.no
              td.yes
            tr.about
              th
              td(colspan="7") WebAudio enables processing of raw audio. For WebRTC applications it's important that this capability not only exist, but that it's capable of being used with a MediaStream as a source.
            tr
              th
                a(href="#dataChannels") dataChannels
              td.yes
              td.yes
              td.yes
              td.yes
              td.no
              td.no
              td.yes
            tr.about
              th
              td(colspan="7") Data channel support comes in two flavors: "reliable" means they are guaranteed to arrive and arrive in the correct order, "unreliable" means that order doesn't matter and dropped messages are acceptable.
            tr
              th
                a(href="#screenSharing") Screen Sharing
              td.yes(title="requires an extension")
              td.yes(title="requires an extension or flag")
              td.no
              td.no
              td.no
              td.no
              td.no
            tr.about
              th
              td(colspan="7") The ability to request access to a MediaStream of the computer screen. This is crucial for feature parity with existing communication solutions.
            tr
              th
                a(href="#rebroadcast") Stream re-broadcasting
              td.inc
              td.inc
              td.no
              td.no
              td.no
              td.no
              td.no
            tr.about
              th
              td(colspan="7") In order to support some of the more interesting topologies for routing data, we need to be able to take a MediaStream object from one peer and add it to another PeerConneciton. Without this, the only way of doing multi-user is a mesh network or a centralized server.
            tr
              th
                a(href="#echo") Solid interoperability
              td.inc
              td.inc
              td.inc
              td.inc
              td.no
              td.no
              td.inc
            tr.about
              th
              td(colspan="7") Multiple browsers consistently being able to talk to each other is essential to making WebRTC a true web technology and not just something that makes for a nice demo.
            tr
              th
                a(href="#echo") Echo cancellation
              td.yes
              td.yes
              td.inc
              td.no
              td.no
              td.no
              td.inc
            tr.about
              th
              td(colspan="7") This may be the most subjective item in this list. 3 or 4 users should be able to use a service like Talky without headphones on and not experience feedback problems.
        p See an error? This site is open source on Github, please let us know by <a href="https://github.com/andyet/iswebrtcreadyyet.com/issues">opening an issue</a>.


        #feedback.card
          h2 Recent conversation quality
          h3
            | Human reported feedback based on the last 
            span.rating(data-browser='overall', data-metric='count', data-no-animate="true")
            |  conversations.
          //
            h2 Current Overall Score 
              span.rating(data-browser='overall', data-metric='highQuality', data-metric-unit='percentage')
          
          each browser in ['Chrome', 'Firefox']
            .report-card-browser
              h3
                img(src = "images/"+browser.toLowerCase()+".png")
                = browser

              .report-card-section
                h4
                  | High Quality: 
                  span.rating(data-browser=browser, data-metric='highQuality', data-metric-unit='percentage')
                .bar-chart(data-browser=browser, data-metric='highQuality', data-metric-unit='percentage')
                  .bar-chart-background
                    .bar-chart-bar

              .report-card-section
                h4 
                  | Good video: 
                  span.rating(data-browser=browser, data-metric='videoProblems', data-metric-unit='percentage-inverted')
                .bar-chart(data-browser=browser, data-metric='videoProblems', data-metric-unit='percentage-inverted')
                  .bar-chart-background
                    .bar-chart-bar

              .report-card-section
                h4 
                  | Good audio: 
                  span.rating(data-browser=browser, data-metric='audioProblems', data-metric-unit='percentage-inverted')
                .bar-chart(data-browser=browser, data-metric='audioProblems', data-metric-unit='percentage-inverted')
                  .bar-chart-background
                    .bar-chart-bar
              
        p
          | This data gathered from the feedback form on 
          a(href="https://talky.io") Talky

      section.help.cf

        article
          h2 You can help make WebRTC better for everyone&mdash;by using it.
          p WebRTC is one of the most transformative additions to the web platform, but it's still early days.
          p There's a big difference between technology that makes for an interesting demo and what's needed for something that could work on par with existing video chat products.
          p That gap can be closed&mdash;and data can help browser developers championing these great features to close it faster.
          h2 Here's how you can help:
          p
            strong 
              | Use 
              a(href="https://talky.io") Talky  
              | the next time you have need for a web video chat, then submit the feedback form. 
          p All statistics are collected anonymously and will be reported publicly on this site.

        aside
          a(href="http://talky.io", class="talky-logo", alt="Talky")
          h3 Help test WebRTC now
          p 
            | Talky is built entirely on open-source, MIT-licensed 
            a(href="http://simplewebrtc.com") SimpleWebRTC 
            | toolkit.
          p 
            | SimpleWebRTC is intended to be fully interoperable with any signaling platform (open source servers like 
            a(href="http://github.com/andyet/signalmaster") SignalMaster
            | , federated protocols like XMPP, and commercial products.)
          p Teams at Mozilla and Google are actively using Talky to dogfood and improve their WebRTC implementations.      
    
    script(src='http://static.andyet.com/tag.js')
    script(src='http://ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js')

    script(src='js/graph.js')
    script.
      $(function () {
        $('table').delegate('th a', 'click', function () {
          $(this).parents('tr').next().slideToggle();
        });
      });
